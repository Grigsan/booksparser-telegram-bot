"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram-–±–æ—Ç–∞ "–ì–æ—Å–ø–æ–¥–∏–Ω –ê–ª–ª–∞–¥–∏–Ω"
"""

import asyncio
import logging
from datetime import datetime
from typing import Optional

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ChatMemberUpdated, ChatMember, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from .config import Config
from .database import Database
from .filters import ContentFilter
from .parser_integration import ParserIntegration

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, Config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(Config.LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class ModerationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM"""
    waiting_for_reason = State()

class ModeratorBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    
    def __init__(self):
        self.config = Config()
        self.bot = Bot(token=self.config.BOT_TOKEN)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.db = Database()
        self.filter = ContentFilter()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–º–∏)
        self.dp.message.register(self.start_command, CommandStart())
        self.dp.message.register(self.help_command, Command('help'))
        self.dp.message.register(self.stats_command, Command('stats'))
        self.dp.message.register(self.warn_command, Command('warn'))
        self.dp.message.register(self.ban_command, Command('ban'))
        self.dp.message.register(self.unban_command, Command('unban'))
        self.dp.message.register(self.mute_command, Command('mute'))
        self.dp.message.register(self.unmute_command, Command('unmute'))
        
        # –ö–æ–º–∞–Ω–¥—ã –ø–∞—Ä—Å–µ—Ä–∞
        self.dp.message.register(self.parse_command, Command('parse'))
        self.dp.message.register(self.books_command, Command('books'))
        self.dp.message.register(self.search_command, Command('search'))
        self.dp.message.register(self.categories_command, Command('categories'))
        self.dp.message.register(self.parser_stats_command, Command('parser_stats'))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–º)
        self.dp.message.register(self.handle_message)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        self.dp.my_chat_member.register(self.handle_chat_member_update)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.dp.callback_query.register(self.handle_callback)
    
    async def start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = message.from_user
        chat = message.chat
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ
        await self.db.update_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        welcome_text = f"""
üé≠ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!**

–Ø - **–ì–æ—Å–ø–æ–¥–∏–Ω –ê–ª–ª–∞–¥–∏–Ω**, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞ –∏ –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–Ω–∏–≥–∞–º.

üîß **–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞ –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø–æ–∏—Å–∫ –∫–Ω–∏–≥
‚Ä¢ –í–µ–¥–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

‚ö° **–Ø —Ä–∞–±–æ—Ç–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!**
–ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Ç–µ—Å—å, –∞ —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º.
        """
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = self._create_main_menu()
        
        await message.answer(welcome_text, parse_mode='Markdown', reply_markup=keyboard)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await self.db.log_action(
            user_id=user.id,
            chat_id=chat.id,
            action_type='start_command',
            message_text=message.text
        )
    
    async def help_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üé≠ **–ì–æ—Å–ø–æ–¥–∏–Ω –ê–ª–ª–∞–¥–∏–Ω - –°–ø—Ä–∞–≤–∫–∞**

üîß **–ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏:**
/warn [@username] [–ø—Ä–∏—á–∏–Ω–∞] - –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/ban [@username] [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unban [@username] - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/mute [@username] [–≤—Ä–µ–º—è] - –ó–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unmute [@username] - –†–∞–∑–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

üìö **–ö–æ–º–∞–Ω–¥—ã –ø–∞—Ä—Å–µ—Ä–∞ –∫–Ω–∏–≥:**
/parse - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∫–Ω–∏–≥
/books [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –∫–Ω–∏–≥
/categories - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–Ω–∏–≥
/parser_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞

üîß **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–ø–∞–º–∞ –∏ —Ñ–ª—É–¥–∞
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: 3
‚Ä¢ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: 5 —Å–µ–∫—É–Ω–¥
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω–∞

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ /stats –∏ /parser_stats**
        """
        
        await message.answer(help_text, parse_mode='Markdown')
    
    async def stats_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self._is_admin(message):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        stats = await self.db.get_stats()
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('banned_users', 0)}

üìà **–î–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats.get('total_actions', 0)}
‚Ä¢ –î–µ–π—Å—Ç–≤–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('today_actions', 0)}

üî• **–¢–æ–ø –¥–µ–π—Å—Ç–≤–∏–π:**
"""
        
        for action in stats.get('top_actions', []):
            stats_text += f"‚Ä¢ {action['action_type']}: {action['count']}\n"
        
        await message.answer(stats_text, parse_mode='Markdown')
    
    async def warn_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /warn"""
        if not await self._is_admin(message):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        
        if not args:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /warn @username [–ø—Ä–∏—á–∏–Ω–∞]")
            return
        
        target_username = args[0].replace('@', '')
        reason = ' '.join(args[1:]) if len(args) > 1 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞"
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
            await self._warn_user(message, target_user, reason)
        else:
            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
    
    async def ban_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ban"""
        if not await self._is_admin(message):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
            return
        
        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
            reason = ' '.join(message.text.split()[1:]) if len(message.text.split()) > 1 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞"
            await self._ban_user(message, target_user, reason)
        else:
            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    
    async def unban_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unban"""
        if not await self._is_admin(message):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
            return
        
        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
            await self._unban_user(message, target_user)
        else:
            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    
    async def mute_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mute"""
        if not await self._is_admin(message):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
            return
        
        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
            duration = message.text.split()[1] if len(message.text.split()) > 1 else "1h"
            await self._mute_user(message, target_user, duration)
        else:
            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≥–ª—É—à–µ–Ω–∏—è")
    
    async def unmute_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unmute"""
        if not await self._is_admin(message):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
            return
        
        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
            await self._unmute_user(message, target_user)
        else:
            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–≥–ª—É—à–µ–Ω–∏—è")
    
    async def handle_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not message.text:
            return
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        if message.text.startswith('/'):
            return
        
        user = message.from_user
        chat = message.chat
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name}: {message.text}")
        logger.info(f"–ú–æ–¥–µ—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {self.config.MODERATION_ENABLED}")
        logger.info(f"–§–∏–ª—å—Ç—Ä –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤: {self.config.PROFANITY_FILTER}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await self.db.update_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = await self.db.get_user(user.id)
        if user_data and user_data.get('is_banned'):
            await message.delete()
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        analysis = self.filter.analyze_message(message.text)
        logger.info(f"–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {analysis}")
        
        if analysis['is_violation']:
            logger.info(f"–ù–∞—Ä—É—à–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {analysis['violation_reason']}")
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            warnings = user_data.get('warnings', 0) if user_data else 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            is_admin = user.id in self.config.ADMIN_IDS
            try:
                member = await self.bot.get_chat_member(message.chat.id, user.id)
                is_admin = is_admin or member.status in ['creator', 'administrator']
            except:
                pass
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            action = self.filter.get_moderation_action(analysis, warnings)
            logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {action}")
            
            # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤—Å–µ–≥–¥–∞ –≤—ã–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if is_admin and action == 'ban':
                action = 'warn'
                logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ban -> warn")
            
            logger.info(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            
            if action == 'delete':
                logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: delete")
                await self._delete_message(message, analysis['violation_reason'])
                return
            elif action == 'warn':
                logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: warn")
                # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Ç–æ–º –≤—ã–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                await message.delete()
                await self._warn_user(message, user, analysis['violation_reason'])
                return
            elif action == 'ban':
                logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: ban")
                await self._ban_user(message, user, analysis['violation_reason'])
                return
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
        else:
            logger.info("–ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    async def handle_chat_member_update(self, update: ChatMemberUpdated):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        if update.new_chat_member.status == ChatMember.MEMBER:
            # –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
            user = update.new_chat_member.user
            await self.db.update_user(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
    
    async def _is_admin(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if message.from_user.id in self.config.ADMIN_IDS:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ
        try:
            member = await self.bot.get_chat_member(message.chat.id, message.from_user.id)
            return member.status in ['creator', 'administrator']
        except:
            return False
    
    async def _delete_message(self, message: Message, reason: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            warning_text = f"""
‚ö†Ô∏è **–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ**

**–ü—Ä–∏—á–∏–Ω–∞:** {reason}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞!
            """
            
            warning_msg = await message.answer(warning_text, parse_mode='Markdown')
            
            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(self.config.AUTO_DELETE_DELAY)
            try:
                await warning_msg.delete()
            except:
                pass
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await self.db.log_action(
                user_id=message.from_user.id,
                chat_id=message.chat.id,
                action_type='message_deleted',
                message_text=message.text,
                reason=reason
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _warn_user(self, message: Message, target_user, reason: str):
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            user_data = await self.db.get_user(target_user.id)
            current_warnings = user_data.get('warnings', 0) if user_data else 0
            new_warnings = current_warnings + 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            await self.db.update_user(
                user_id=target_user.id,
                warnings=new_warnings
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if new_warnings >= self.config.MAX_WARNINGS:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                is_admin = target_user.id in self.config.ADMIN_IDS
                if is_admin:
                    # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º, —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
                    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {target_user.id} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è")
                else:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                    await self._ban_user(message, target_user, f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {new_warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
                    return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            warning_text = f"""
‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ #{new_warnings}**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {target_user.first_name}
**–ü—Ä–∏—á–∏–Ω–∞:** {reason}
**–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:** {new_warnings}/{self.config.MAX_WARNINGS}

{f'üö® **–í–ù–ò–ú–ê–ù–ò–ï!** –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ {self.config.MAX_WARNINGS} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!' if new_warnings >= self.config.MAX_WARNINGS - 1 else ''}
            """
            
            await message.answer(warning_text, parse_mode='Markdown')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await self.db.log_action(
                user_id=target_user.id,
                chat_id=message.chat.id,
                action_type='user_warned',
                reason=reason
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    async def _ban_user(self, message: Message, target_user, reason: str):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
            await self.bot.ban_chat_member(message.chat.id, target_user.id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            await self.db.update_user(
                user_id=target_user.id,
                is_banned=True
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            ban_text = f"""
üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {target_user.first_name}
**–ü—Ä–∏—á–∏–Ω–∞:** {reason}
**–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """
            
            await message.answer(ban_text, parse_mode='Markdown')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await self.db.log_action(
                user_id=target_user.id,
                chat_id=message.chat.id,
                action_type='user_banned',
                reason=reason
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    async def _unban_user(self, message: Message, target_user):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.bot.unban_chat_member(message.chat.id, target_user.id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            await self.db.update_user(
                user_id=target_user.id,
                is_banned=False,
                warnings=0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            unban_text = f"""
‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {target_user.first_name}
**–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """
            
            await message.answer(unban_text, parse_mode='Markdown')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await self.db.log_action(
                user_id=target_user.id,
                chat_id=message.chat.id,
                action_type='user_unbanned'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    async def _mute_user(self, message: Message, target_user, duration: str):
        """–ó–∞–≥–ª—É—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥–ª—É—à–µ–Ω–∏—è
            # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            await self.db.update_user(
                user_id=target_user.id,
                is_muted=True
            )
            
            mute_text = f"""
üîá **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥–ª—É—à–µ–Ω**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {target_user.first_name}
**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {duration}
**–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """
            
            await message.answer(mute_text, parse_mode='Markdown')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await self.db.log_action(
                user_id=target_user.id,
                chat_id=message.chat.id,
                action_type='user_muted',
                reason=f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥–ª—É—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    async def _unmute_user(self, message: Message, target_user):
        """–†–∞–∑–≥–ª—É—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            await self.db.update_user(
                user_id=target_user.id,
                is_muted=False
            )
            
            unmute_text = f"""
üîä **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–≥–ª—É—à–µ–Ω**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {target_user.first_name}
**–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """
            
            await message.answer(unmute_text, parse_mode='Markdown')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await self.db.log_action(
                user_id=target_user.id,
                chat_id=message.chat.id,
                action_type='user_unmuted'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–≥–ª—É—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    async def parse_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /parse - –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–Ω–∏–≥"""
        if not await self._is_admin(message):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        parsing_msg = await message.answer("üîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–Ω–∏–≥... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")
        
        try:
            async with ParserIntegration() as parser:
                result = await parser.start_parsing()
                
                if result["success"]:
                    await parsing_msg.edit_text(f"‚úÖ {result['message']}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                    await self.db.log_action(
                        user_id=message.from_user.id,
                        chat_id=message.chat.id,
                        action_type='parsing_started',
                        message_text=message.text
                    )
                else:
                    await parsing_msg.edit_text(f"‚ùå {result['message']}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            await parsing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
    
    async def books_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /books - —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä limit –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            args = message.text.split()[1:] if len(message.text.split()) > 1 else []
            limit = int(args[0]) if args and args[0].isdigit() else 10
            
            books_msg = await message.answer("üìö –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥...")
            
            async with ParserIntegration() as parser:
                result = await parser.get_books_list(limit)
                
                if result["success"]:
                    books = result["data"]
                    if books:
                        books_text = f"üìö **–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {len(books)}**\n\n"
                        
                        for i, book in enumerate(books[:limit], 1):
                            title = book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            price = book.get('price', 'N/A')
                            category = book.get('category', 'N/A')
                            
                            books_text += f"{i}. **{title}**\n"
                            books_text += f"   üí∞ –¶–µ–Ω–∞: {price}\n"
                            books_text += f"   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
                        
                        await books_msg.edit_text(books_text, parse_mode='Markdown')
                    else:
                        await books_msg.edit_text("üìö –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    await books_msg.edit_text(f"‚ùå {result['message']}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥: {str(e)}")
    
    async def search_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search - –ø–æ–∏—Å–∫ –∫–Ω–∏–≥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            args = message.text.split()[1:] if len(message.text.split()) > 1 else []
            if not args:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>")
                return
            
            query = ' '.join(args)
            search_msg = await message.answer(f"üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'...")
            
            async with ParserIntegration() as parser:
                result = await parser.search_books(query, limit=5)
                
                if result["success"]:
                    books = result["data"]
                    if books:
                        search_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{query}'**\n"
                        search_text += f"–ù–∞–π–¥–µ–Ω–æ: {len(books)} –∫–Ω–∏–≥\n\n"
                        
                        for i, book in enumerate(books, 1):
                            title = book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            price = book.get('price', 'N/A')
                            category = book.get('category', 'N/A')
                            
                            search_text += f"{i}. **{title}**\n"
                            search_text += f"   üí∞ –¶–µ–Ω–∞: {price}\n"
                            search_text += f"   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
                        
                        await search_msg.edit_text(search_text, parse_mode='Markdown')
                    else:
                        await search_msg.edit_text(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    await search_msg.edit_text(f"‚ùå {result['message']}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
    
    async def categories_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /categories - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–Ω–∏–≥"""
        try:
            categories_msg = await message.answer("üè∑Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
            
            async with ParserIntegration() as parser:
                result = await parser.get_categories()
                
                if result["success"]:
                    categories = result["data"]
                    if categories:
                        categories_text = f"üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–Ω–∏–≥ ({len(categories)}):**\n\n"
                        categories_text += "\n".join([f"‚Ä¢ {cat}" for cat in categories])
                        
                        await categories_msg.edit_text(categories_text, parse_mode='Markdown')
                    else:
                        await categories_msg.edit_text("üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    await categories_msg.edit_text(f"‚ùå {result['message']}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")
    
    async def parser_stats_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /parser_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        if not await self._is_admin(message):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞")
            return
        
        try:
            stats_msg = await message.answer("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞...")
            
            async with ParserIntegration() as parser:
                result = await parser.get_books_stats()
                
                if result["success"]:
                    stats = result["data"]
                    
                    stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–Ω–∏–≥**

üìö **–ö–Ω–∏–≥–∏:**
‚Ä¢ –í—Å–µ–≥–æ –∫–Ω–∏–≥: {stats.get('total_products', 0)}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(stats.get('categories', {}))}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats.get('average_price', 0)}

üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**
"""
                    
                    for category, count in stats.get('categories', {}).items():
                        stats_text += f"‚Ä¢ {category}: {count} –∫–Ω–∏–≥\n"
                    
                    await stats_msg.edit_text(stats_text, parse_mode='Markdown')
                else:
                    await stats_msg.edit_text(f"‚ùå {result['message']}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    def _create_main_menu(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìö –ö–Ω–∏–≥–∏", callback_data="books_menu"),
                InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search_menu")
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu"),
                InlineKeyboardButton(text="üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories_menu")
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="moderation_menu"),
                InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help_menu")
            ]
        ])
        return keyboard
    
    def _create_books_menu(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∫–Ω–∏–≥"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ (5)", callback_data="books_5"),
                InlineKeyboardButton(text="üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ (10)", callback_data="books_10")
            ],
            [
                InlineKeyboardButton(text="üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data="parse_books"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞", callback_data="parser_stats")
            ],
            [
                InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
        return keyboard
    
    def _create_search_menu(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search_title"),
                InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É", callback_data="search_author")
            ],
            [
                InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="search_category"),
                InlineKeyboardButton(text="üîç –°–ª—É—á–∞–π–Ω—ã–µ –∫–Ω–∏–≥–∏", callback_data="random_books")
            ],
            [
                InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
        return keyboard
    
    def _create_moderation_menu(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="moderation_stats"),
                InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users_stats")
            ],
            [
                InlineKeyboardButton(text="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", callback_data="warnings_stats"),
                InlineKeyboardButton(text="üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏", callback_data="bans_stats")
            ],
            [
                InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
        return keyboard
    
    async def handle_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            data = callback.data
            
            if data == "main_menu":
                await self._show_main_menu(callback)
            elif data == "books_menu":
                await self._show_books_menu(callback)
            elif data == "search_menu":
                await self._show_search_menu(callback)
            elif data == "moderation_menu":
                await self._show_moderation_menu(callback)
            elif data == "help_menu":
                await self._show_help_menu(callback)
            elif data == "stats_menu":
                await self._show_stats_menu(callback)
            elif data == "categories_menu":
                await self._show_categories_menu(callback)
            elif data.startswith("books_"):
                limit = int(data.split("_")[1])
                await self._show_books_list(callback, limit)
            elif data == "parse_books":
                await self._start_parsing(callback)
            elif data == "parser_stats":
                await self._show_parser_stats(callback)
            elif data == "moderation_stats":
                await self._show_moderation_stats(callback)
            elif data == "random_books":
                await self._show_random_books(callback)
            elif data.startswith("book_detail_"):
                book_id = data.split("_")[2]
                await self._show_book_detail(callback, book_id)
            else:
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _show_main_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        text = """
üé≠ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:
        """
        keyboard = self._create_main_menu()
        await callback.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)
        await callback.answer()
    
    async def _show_books_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–Ω–∏–≥"""
        text = """
üìö **–ú–µ–Ω—é –∫–Ω–∏–≥**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        keyboard = self._create_books_menu()
        await callback.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)
        await callback.answer()
    
    async def _show_search_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∏—Å–∫–∞"""
        text = """
üîç **–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:
        """
        keyboard = self._create_search_menu()
        await callback.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)
        await callback.answer()
    
    async def _show_moderation_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        logger.info(f"ADMIN_IDS: {self.config.ADMIN_IDS}")
        
        if not await self._is_admin_callback(callback):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
            return
        
        text = """
‚öôÔ∏è **–ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        keyboard = self._create_moderation_menu()
        await callback.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)
        await callback.answer()
    
    async def _show_help_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üé≠ **–ì–æ—Å–ø–æ–¥–∏–Ω –ê–ª–ª–∞–¥–∏–Ω - –°–ø—Ä–∞–≤–∫–∞**

üîß **–ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏:**
/warn [@username] [–ø—Ä–∏—á–∏–Ω–∞] - –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/ban [@username] [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unban [@username] - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/mute [@username] [–≤—Ä–µ–º—è] - –ó–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unmute [@username] - –†–∞–∑–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üìö **–ö–æ–º–∞–Ω–¥—ã –ø–∞—Ä—Å–µ—Ä–∞ –∫–Ω–∏–≥:**
/parse - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∫–Ω–∏–≥
/books [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –∫–Ω–∏–≥
/categories - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–Ω–∏–≥
/parser_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞

üîß **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–ø–∞–º–∞ –∏ —Ñ–ª—É–¥–∞
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: 3
‚Ä¢ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: 5 —Å–µ–∫—É–Ω–¥
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω–∞
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(help_text, parse_mode='Markdown', reply_markup=keyboard)
        await callback.answer()
    
    async def _show_stats_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="moderation_stats"),
                InlineKeyboardButton(text="üìö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞", callback_data="parser_stats")
            ],
            [
                InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
        
        text = """
üìä **–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
        """
        
        await callback.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)
        await callback.answer()
    
    async def _show_categories_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            await callback.answer("üè∑Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
            
            async with ParserIntegration() as parser:
                result = await parser.get_categories()
                
                if result["success"]:
                    categories = result["data"]
                    if categories:
                        text = f"üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–Ω–∏–≥ ({len(categories)}):**\n\n"
                        text += "\n".join([f"‚Ä¢ {cat}" for cat in categories])
                    else:
                        text = "üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                else:
                    text = f"‚ùå {result['message']}"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    
    async def _show_books_list(self, callback: CallbackQuery, limit: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥"""
        try:
            await callback.answer("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥...")
            
            async with ParserIntegration() as parser:
                result = await parser.get_books_list(limit)
                
                if result["success"]:
                    books = result["data"]
                    if books:
                        text = f"üìö **–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {len(books)}**\n\n"
                        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏
                        keyboard_buttons = []
                        for i, book in enumerate(books[:limit], 1):
                            title = book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
                            button_text = title[:30] + "..." if len(title) > 30 else title
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–Ω–∏–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            logger.info(f"–ö–Ω–∏–≥–∞ {i}: {book}")
                            
                            keyboard_buttons.append([
                                InlineKeyboardButton(
                                    text=f"{i}. {button_text}", 
                                    callback_data=f"book_detail_{book.get('id', i)}"
                                )
                            ])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                        keyboard_buttons.append([
                            InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                        ])
                        
                        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                    else:
                        text = "üìö –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                        ])
                else:
                    text = f"‚ùå {result['message']}"
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
            
            await callback.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥")
    
    async def _start_parsing(self, callback: CallbackQuery):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"""
        if not await self._is_admin_callback(callback):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return
        
        try:
            await callback.answer("üîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
            
            async with ParserIntegration() as parser:
                result = await parser.start_parsing()
                
                if result["success"]:
                    text = f"‚úÖ {result['message']}"
                else:
                    text = f"‚ùå {result['message']}"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
    
    async def _show_parser_stats(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            await callback.answer("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            
            async with ParserIntegration() as parser:
                result = await parser.get_books_stats()
                
                if result["success"]:
                    stats = result["data"]
                    
                    text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∫–Ω–∏–≥**

üìö **–ö–Ω–∏–≥–∏:**
‚Ä¢ –í—Å–µ–≥–æ –∫–Ω–∏–≥: {stats.get('total_products', 0)}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(stats.get('categories', {}))}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats.get('average_price', 0)}

üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**
"""
                    
                    for category, count in stats.get('categories', {}).items():
                        text += f"‚Ä¢ {category}: {count} –∫–Ω–∏–≥\n"
                else:
                    text = f"‚ùå {result['message']}"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def _show_moderation_stats(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        if not await self._is_admin_callback(callback):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        try:
            await callback.answer("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            
            stats = await self.db.get_stats()
            
            text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('banned_users', 0)}

üìà **–î–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats.get('total_actions', 0)}
‚Ä¢ –î–µ–π—Å—Ç–≤–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('today_actions', 0)}

üî• **–¢–æ–ø –¥–µ–π—Å—Ç–≤–∏–π:**
"""
            
            for action in stats.get('top_actions', []):
                text += f"‚Ä¢ {action['action_type']}: {action['count']}\n"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await callback.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def _show_random_books(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∫–Ω–∏–≥–∏"""
        try:
            await callback.answer("üé≤ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–Ω–∏–≥...")
            
            async with ParserIntegration() as parser:
                result = await parser.get_books_list(5)
                
                if result["success"]:
                    books = result["data"]
                    if books:
                        text = "üé≤ **–°–ª—É—á–∞–π–Ω—ã–µ –∫–Ω–∏–≥–∏ (5):**\n\n"
                        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏
                        keyboard_buttons = []
                        for i, book in enumerate(books, 1):
                            title = book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
                            button_text = title[:30] + "..." if len(title) > 30 else title
                            keyboard_buttons.append([
                                InlineKeyboardButton(
                                    text=f"{i}. {button_text}", 
                                    callback_data=f"book_detail_{book.get('id', i)}"
                                )
                            ])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                        keyboard_buttons.append([
                            InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                        ])
                        
                        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                    else:
                        text = "üé≤ –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                        ])
                else:
                    text = f"‚ùå {result['message']}"
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
            
            await callback.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–Ω–∏–≥: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥")
    
    async def _show_book_detail(self, callback: CallbackQuery, book_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ"""
        try:
            await callback.answer("üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ...")
            
            async with ParserIntegration() as parser:
                result = await parser.get_books_list(100)  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –∫–Ω–∏–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞
                
                if result["success"]:
                    books = result["data"]
                    book = None
                    
                    # –ò—â–µ–º –∫–Ω–∏–≥—É –ø–æ ID
                    for b in books:
                        if str(b.get('id', '')) == str(book_id):
                            book = b
                            break
                    
                    if book:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        title = book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        author = book.get('author', '–ù–µ —É–∫–∞–∑–∞–Ω')
                        price = book.get('price', 'N/A')
                        category = book.get('category', 'N/A')
                        book_url = book.get('book_url', '') or book.get('url', '')
                        image_url = book.get('image_url', '') or book.get('image', '')
                        rating = book.get('rating', 'N/A')
                        availability = book.get('availability', 'N/A')
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        logger.info(f"–î–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏: title={title}, author={author}, book_url={book_url}, image_url={image_url}")
                        
                        text = f"""
üìñ **{title}**

üë§ **–ê–≤—Ç–æ—Ä:** {author}
üí∞ **–¶–µ–Ω–∞:** {price}
üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}
‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {rating}
üì¶ **–ù–∞–ª–∏—á–∏–µ:** {availability}
                        """
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
                        keyboard_buttons = []
                        
                        # –ö–Ω–æ–ø–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–∏–≥—É
                        if book_url:
                            keyboard_buttons.append([
                                InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –∫–Ω–∏–≥—É", url=book_url)
                            ])
                        
                        # –ö–Ω–æ–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if image_url:
                            keyboard_buttons.append([
                                InlineKeyboardButton(text="üñºÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–ª–æ–∂–∫—É", url=image_url)
                            ])
                        
                        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                        keyboard_buttons.append([
                            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="books_5")
                        ])
                        
                        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å
                        if image_url:
                            try:
                                await callback.message.chat.send_photo(
                                    photo=image_url,
                                    caption=text,
                                    parse_mode='Markdown',
                                    reply_markup=keyboard
                                )
                                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
                                try:
                                    await callback.message.delete()
                                except:
                                    pass
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                                await callback.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)
                        else:
                            await callback.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)
                    else:
                        text = "‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="books_5")]
                        ])
                        await callback.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)
                else:
                    text = f"‚ùå {result['message']}"
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                    await callback.message.edit_text(text, parse_mode='Markdown', reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ")
    
    async def _is_admin_callback(self, callback: CallbackQuery) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è callback"""
        if callback.from_user.id in self.config.ADMIN_IDS:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ
        try:
            member = await self.bot.get_chat_member(callback.message.chat.id, callback.from_user.id)
            return member.status in ['creator', 'administrator']
        except:
            return False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await self.db.connect()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("üé≠ –ì–æ—Å–ø–æ–¥–∏–Ω –ê–ª–ª–∞–¥–∏–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        finally:
            await self.db.close()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üõë –ì–æ—Å–ø–æ–¥–∏–Ω –ê–ª–ª–∞–¥–∏–Ω –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
        await self.db.close()
        await self.bot.session.close()
