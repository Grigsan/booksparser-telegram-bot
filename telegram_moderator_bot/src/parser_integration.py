"""
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–∞—Ä—Å–µ—Ä–æ–º –∫–Ω–∏–≥
"""

import aiohttp
import asyncio
import logging
from typing import Dict, List, Optional
from .config import Config

logger = logging.getLogger(__name__)

class ParserIntegration:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–∞—Ä—Å–µ—Ä–æ–º –∫–Ω–∏–≥"""
    
    def __init__(self):
        self.config = Config()
        # URL API –ø–∞—Ä—Å–µ—Ä–∞ (–∏–∑ docker-compose —Å–µ—Ç–∏)
        self.parser_api_url = "http://tehnoparser-api:5000"
        self.session: Optional[aiohttp.ClientSession] = None
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
    
    async def _make_request(self, method: str, url: str, **kwargs) -> aiohttp.ClientResponse:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å retry –ª–æ–≥–∏–∫–æ–π"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                if not self.session:
                    self.session = aiohttp.ClientSession()
                
                async with self.session.request(method, url, **kwargs) as response:
                    return response
            except (aiohttp.ClientError, asyncio.TimeoutError) as e:
                if attempt == max_retries - 1:
                    raise e
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã: {e}")
                await asyncio.sleep(2)
    
    async def start_parsing(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–Ω–∏–≥"""
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            health_check = await self.check_parser_health()
            if not health_check["success"]:
                return {
                    "success": False,
                    "message": f"–ü–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health_check['message']}",
                    "error": "parser_unavailable"
                }
            
            response = await self._make_request(
                "POST",
                f"{self.parser_api_url}/parse",
                json={"force": True},
                timeout=aiohttp.ClientTimeout(total=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
            
            if response.status == 200:
                result = await response.json()
                logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω: {result}")
                return {
                    "success": True,
                    "message": f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.get('parsed_count', 0)} –∫–Ω–∏–≥",
                    "data": result
                }
            else:
                error_text = await response.text()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {response.status} - {error_text}")
                return {
                    "success": False,
                    "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {response.status}",
                    "error": error_text
                }
        except asyncio.TimeoutError:
            logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return {
                "success": False,
                "message": "–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
                "error": "timeout"
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞—Ä—Å–µ—Ä—É: {e}")
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞—Ä—Å–µ—Ä—É: {str(e)}",
                "error": str(e)
            }
    
    async def get_books_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–Ω–∏–≥"""
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            async with self.session.get(
                f"{self.parser_api_url}/stats",
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {result}")
                    return {
                        "success": True,
                        "data": result.get("stats", {}),
                        "message": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
                    }
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status} - {error_text}")
                    return {
                        "success": False,
                        "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status}",
                        "error": error_text
                    }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞—Ä—Å–µ—Ä—É: {str(e)}",
                "error": str(e)
            }
    
    async def get_books_list(self, limit: int = 10) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥"""
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            async with self.session.get(
                f"{self.parser_api_url}/products?limit={limit}",
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    books = result.get("products", [])
                    logger.info(f"üìö –ü–æ–ª—É—á–µ–Ω–æ –∫–Ω–∏–≥: {len(books)}")
                    return {
                        "success": True,
                        "data": books,
                        "count": len(books),
                        "message": f"–ù–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥"
                    }
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥: {response.status} - {error_text}")
                    return {
                        "success": False,
                        "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥: {response.status}",
                        "error": error_text
                    }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥: {e}")
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞—Ä—Å–µ—Ä—É: {str(e)}",
                "error": str(e)
            }
    
    async def search_books(self, query: str, limit: int = 10) -> Dict:
        """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥"""
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            async with self.session.get(
                f"{self.parser_api_url}/search?q={query}&limit={limit}",
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    books = result.get("products", [])
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {len(books)}")
                    return {
                        "success": True,
                        "data": books,
                        "count": len(books),
                        "query": query,
                        "message": f"–ù–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'"
                    }
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥: {response.status} - {error_text}")
                    return {
                        "success": False,
                        "message": f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥: {response.status}",
                        "error": error_text
                    }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥: {e}")
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞—Ä—Å–µ—Ä—É: {str(e)}",
                "error": str(e)
            }
    
    async def get_categories(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–Ω–∏–≥"""
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            async with self.session.get(
                f"{self.parser_api_url}/categories",
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    categories = result.get("categories", [])
                    logger.info(f"üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
                    return {
                        "success": True,
                        "data": categories,
                        "count": len(categories),
                        "message": f"–ù–∞–π–¥–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
                    }
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status} - {error_text}")
                    return {
                        "success": False,
                        "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status}",
                        "error": error_text
                    }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞—Ä—Å–µ—Ä—É: {str(e)}",
                "error": str(e)
            }
    
    async def check_parser_health(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            async with self.session.get(
                f"{self.parser_api_url}/health",
                timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    return {
                        "success": True,
                        "status": "healthy",
                        "data": result,
                        "message": "–ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
                    }
                else:
                    return {
                        "success": False,
                        "status": "unhealthy",
                        "message": f"–ü–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}"
                    }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            return {
                "success": False,
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞—Ä—Å–µ—Ä—É: {str(e)}"
            }
