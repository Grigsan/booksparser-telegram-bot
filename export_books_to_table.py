#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –∏–∑ SQLite –≤ —Ç–∞–±–ª–∏—Ü—É
–°–æ–∑–¥–∞–µ—Ç SQL —Ç–∞–±–ª–∏—Ü—É –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
"""

import sqlite3
import json
import csv
from datetime import datetime
import os

def export_books_to_sql_table():
    """–≠–∫—Å–ø–æ—Ä—Ç –∫–Ω–∏–≥ –≤ SQL —Ç–∞–±–ª–∏—Ü—É"""
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞
    source_db = "books_products.db"
    if not os.path.exists(source_db):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {source_db} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑–µ
        source_conn = sqlite3.connect(source_db)
        source_cursor = source_conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏
        source_cursor.execute("""
            SELECT id, name, brand, price, category, product_url, image_url, rating, created_at
            FROM products 
            ORDER BY id
        """)
        
        books = source_cursor.fetchall()
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        output_db = "books_table.db"
        output_conn = sqlite3.connect(output_db)
        output_cursor = output_conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–Ω–∏–≥
        output_cursor.execute("""
            CREATE TABLE IF NOT EXISTS books_table (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                book_id INTEGER,
                title TEXT NOT NULL,
                author TEXT,
                price REAL,
                category TEXT,
                book_url TEXT,
                image_url TEXT,
                rating REAL,
                availability TEXT,
                parsed_date TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        output_cursor.execute("DELETE FROM books_table")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for book in books:
            book_id, name, brand, price, category, product_url, image_url, rating, created_at = book
            
            output_cursor.execute("""
                INSERT INTO books_table 
                (book_id, title, author, price, category, book_url, image_url, rating, parsed_date)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                book_id,
                name,
                brand or "Unknown Author",
                price,
                category,
                product_url,
                image_url,
                rating,
                created_at
            ))
        
        output_conn.commit()
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(books)} –∫–Ω–∏–≥ –≤ —Ç–∞–±–ª–∏—Ü—É {output_db}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ CSV —Ñ–∞–π–ª
        csv_filename = "books_export.csv"
        with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                'ID', 'Title', 'Author', 'Price (¬£)', 'Category', 
                'Book URL', 'Image URL', 'Rating', 'Parsed Date'
            ])
            
            # –î–∞–Ω–Ω—ã–µ
            for book in books:
                book_id, name, brand, price, category, product_url, image_url, rating, created_at = book
                writer.writerow([
                    book_id,
                    name,
                    brand or "Unknown Author",
                    f"¬£{price:.2f}" if price else "N/A",
                    category,
                    product_url,
                    image_url,
                    f"{rating}/5" if rating else "N/A",
                    created_at
                ])
        
        print(f"üìÑ –°–æ–∑–¥–∞–Ω CSV —Ñ–∞–π–ª: {csv_filename}")
        
        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
        json_filename = "books_export.json"
        books_data = []
        
        for book in books:
            book_id, name, brand, price, category, product_url, image_url, rating, created_at = book
            books_data.append({
                "id": book_id,
                "title": name,
                "author": brand or "Unknown Author",
                "price": price,
                "price_formatted": f"¬£{price:.2f}" if price else "N/A",
                "category": category,
                "book_url": product_url,
                "image_url": image_url,
                "rating": rating,
                "rating_formatted": f"{rating}/5" if rating else "N/A",
                "parsed_date": created_at
            })
        
        with open(json_filename, 'w', encoding='utf-8') as jsonfile:
            json.dump(books_data, jsonfile, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –°–æ–∑–¥–∞–Ω JSON —Ñ–∞–π–ª: {json_filename}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        output_cursor.execute("SELECT COUNT(*) FROM books_table")
        count = output_cursor.fetchone()[0]
        
        output_cursor.execute("SELECT category, COUNT(*) FROM books_table GROUP BY category")
        categories = output_cursor.fetchall()
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—ã:")
        print(f"   –í—Å–µ–≥–æ –∫–Ω–∏–≥: {count}")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        for cat, cat_count in categories:
            print(f"     - {cat}: {cat_count} –∫–Ω–∏–≥")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        source_conn.close()
        output_conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        return False

def create_sql_script():
    """–°–æ–∑–¥–∞–µ—Ç SQL —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
    
    sql_script = """
-- –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∫–Ω–∏–≥
-- –°–æ–∑–¥–∞–Ω: {date}

CREATE TABLE IF NOT EXISTS books_table (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    book_id INTEGER,
    title TEXT NOT NULL,
    author TEXT,
    price REAL,
    category TEXT,
    book_url TEXT,
    image_url TEXT,
    rating REAL,
    availability TEXT DEFAULT 'In stock',
    parsed_date TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
CREATE INDEX IF NOT EXISTS idx_books_category ON books_table(category);
CREATE INDEX IF NOT EXISTS idx_books_author ON books_table(author);
CREATE INDEX IF NOT EXISTS idx_books_price ON books_table(price);

-- –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:

-- 1. –í—Å–µ –∫–Ω–∏–≥–∏
SELECT * FROM books_table ORDER BY title;

-- 2. –ö–Ω–∏–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
SELECT category, COUNT(*) as count 
FROM books_table 
GROUP BY category 
ORDER BY count DESC;

-- 3. –°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –∫–Ω–∏–≥–∏
SELECT title, author, price 
FROM books_table 
WHERE price IS NOT NULL 
ORDER BY price DESC 
LIMIT 10;

-- 4. –ö–Ω–∏–≥–∏ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
SELECT title, author, rating, price 
FROM books_table 
WHERE rating >= 4.0 
ORDER BY rating DESC;

-- 5. –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É
SELECT title, price, rating 
FROM books_table 
WHERE author LIKE '%Shakespeare%';

-- 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
SELECT 
    MIN(price) as min_price,
    MAX(price) as max_price,
    AVG(price) as avg_price,
    COUNT(*) as total_books
FROM books_table 
WHERE price IS NOT NULL;
""".format(date=datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    
    with open("create_books_table.sql", "w", encoding="utf-8") as f:
        f.write(sql_script)
    
    print("üìÑ –°–æ–∑–¥–∞–Ω SQL —Å–∫—Ä–∏–ø—Ç: create_books_table.sql")

if __name__ == "__main__":
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –∫–Ω–∏–≥ –≤ —Ç–∞–±–ª–∏—Ü—É...")
    
    # –°–æ–∑–¥–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç
    create_sql_script()
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    if export_books_to_sql_table():
        print("\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print("   - books_table.db (SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)")
        print("   - books_export.csv (CSV —Ñ–∞–π–ª)")
        print("   - books_export.json (JSON —Ñ–∞–π–ª)")
        print("   - create_books_table.sql (SQL —Å–∫—Ä–∏–ø—Ç)")
    else:
        print("\n‚ùå –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è!")
