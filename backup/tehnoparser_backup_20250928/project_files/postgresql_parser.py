#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import psycopg2
from typing import List, Dict
import logging

logger = logging.getLogger(__name__)

class PostgreSQLParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
        self.postgres_config = {
            'host': 'postgresql-grigson69.alwaysdata.net',
            'port': 5432,
            'database': 'grigson69_2',
            'user': 'grigson69',
            'password': 'grigson96911'
        }
        self.connection = None
        
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
        try:
            self.connection = psycopg2.connect(**self.postgres_config)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç PostgreSQL"""
        if self.connection:
            self.connection.close()
            logger.info("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç PostgreSQL")
    
    def get_unique_books_from_db(self, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –∏–∑ PostgreSQL (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)"""
        if not self.connection:
            if not self.connect():
                return []
        
        try:
            cursor = self.connection.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –±–µ—Ä–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
            query = """
            SELECT DISTINCT ON (title) 
                id, book_id, title, author, price, category, book_url, image_url, 
                rating, availability, parsed_date, created_at
            FROM books_table 
            ORDER BY title, created_at DESC 
            LIMIT %s
            """
            
            cursor.execute(query, (limit,))
            columns = [desc[0] for desc in cursor.description]
            books = []
            
            for row in cursor.fetchall():
                book = dict(zip(columns, row))
                books.append(book)
            
            cursor.close()
            logger.info(f"üìö –ü–æ–ª—É—á–µ–Ω–æ {len(books)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –∏–∑ PostgreSQL")
            return books
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥ –∏–∑ PostgreSQL: {e}")
            return []
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ PostgreSQL"""
        if not self.connection:
            if not self.connect():
                return {"total_products": 0, "categories": {}, "average_price": 0}
        
        try:
            cursor = self.connection.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥
            cursor.execute("""
                SELECT COUNT(DISTINCT title) 
                FROM books_table
            """)
            total_products = cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            cursor.execute("""
                SELECT category, COUNT(DISTINCT title) as count
                FROM books_table 
                GROUP BY category
            """)
            categories = dict(cursor.fetchall())
            
            # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
            cursor.execute("""
                SELECT AVG(price) 
                FROM books_table 
                WHERE price IS NOT NULL
            """)
            avg_price = cursor.fetchone()[0] or 0
            
            cursor.close()
            
            return {
                "total_products": total_products,
                "categories": categories,
                "average_price": round(float(avg_price), 2)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"total_products": 0, "categories": {}, "average_price": 0}
    
    def search_books(self, query: str, limit: int = 50) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –≤ PostgreSQL"""
        if not self.connection:
            if not self.connect():
                return []
        
        try:
            cursor = self.connection.cursor()
            
            # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É
            search_query = """
            SELECT DISTINCT ON (title) 
                id, book_id, title, author, price, category, book_url, image_url, 
                rating, availability, parsed_date, created_at
            FROM books_table 
            WHERE LOWER(title) LIKE LOWER(%s) OR LOWER(author) LIKE LOWER(%s)
            ORDER BY title, created_at DESC 
            LIMIT %s
            """
            
            search_term = f"%{query}%"
            cursor.execute(search_query, (search_term, search_term, limit))
            columns = [desc[0] for desc in cursor.description]
            books = []
            
            for row in cursor.fetchall():
                book = dict(zip(columns, row))
                books.append(book)
            
            cursor.close()
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
            return books
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥: {e}")
            return []
