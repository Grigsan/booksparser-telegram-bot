#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –≤ PostgreSQL
"""

import sqlite3
import psycopg2
import json
from datetime import datetime
import os

def export_to_postgresql():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
    POSTGRES_CONFIG = {
        'host': 'postgresql-grigson69.alwaysdata.net',
        'port': 5432,
        'database': 'grigson69_2',
        'user': 'grigson69',
        'password': 'grigson96911'
    }
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –±–∞–∑—É)
    sqlite_conn = sqlite3.connect("books_products.db")
    sqlite_cursor = sqlite_conn.cursor()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        postgres_conn = psycopg2.connect(**POSTGRES_CONFIG)
        postgres_cursor = postgres_conn.cursor()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        create_table_sql = """
        CREATE TABLE IF NOT EXISTS books_table (
            id SERIAL PRIMARY KEY,
            book_id INTEGER,
            title TEXT NOT NULL,
            author TEXT,
            price DECIMAL(10,2),
            category TEXT,
            book_url TEXT,
            image_url TEXT,
            rating DECIMAL(3,1),
            availability TEXT DEFAULT 'In stock',
            parsed_date TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """
        
        postgres_cursor.execute(create_table_sql)
        postgres_conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ books_table —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        postgres_cursor.execute("DELETE FROM books_table")
        postgres_conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã products)
        sqlite_cursor.execute("""
            SELECT id, name, brand, price, category, product_url, image_url, rating, availability, created_at
            FROM products 
            ORDER BY id
        """)
        books = sqlite_cursor.fetchall()
        
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL
        insert_sql = """
        INSERT INTO books_table 
        (book_id, title, author, price, category, book_url, image_url, rating, availability, parsed_date)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """
        
        for book in books:
            book_id, title, author, price, category, book_url, image_url, rating, availability, created_at = book
            
            postgres_cursor.execute(insert_sql, (
                book_id,
                title,
                author,
                price,
                category,
                book_url,
                image_url,
                rating,
                availability or 'In stock',
                created_at
            ))
        
        postgres_conn.commit()
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(books)} –∫–Ω–∏–≥ –≤ PostgreSQL")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        postgres_cursor.execute("SELECT COUNT(*) FROM books_table")
        count = postgres_cursor.fetchone()[0]
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ PostgreSQL: {count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        postgres_cursor.execute("SELECT category, COUNT(*) FROM books_table GROUP BY category")
        categories = postgres_cursor.fetchall()
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for cat, cat_count in categories:
            print(f"   - {cat}: {cat_count} –∫–Ω–∏–≥")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
        postgres_cursor.execute("""
            SELECT 
                MIN(price) as min_price,
                MAX(price) as max_price,
                AVG(price) as avg_price
            FROM books_table 
            WHERE price IS NOT NULL
        """)
        price_stats = postgres_cursor.fetchone()
        
        print(f"\nüí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º:")
        print(f"   - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ¬£{price_stats[0]:.2f}")
        print(f"   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ¬£{price_stats[1]:.2f}")
        print(f"   - –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ¬£{price_stats[2]:.2f}")
        
        postgres_conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ PostgreSQL: {e}")
        return False
    
    finally:
        sqlite_conn.close()

def test_postgresql_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    
    POSTGRES_CONFIG = {
        'host': 'postgresql-grigson69.alwaysdata.net',
        'port': 5432,
        'database': 'grigson69_2',
        'user': 'grigson69',
        'password': 'grigson96911'
    }
    
    try:
        conn = psycopg2.connect(**POSTGRES_CONFIG)
        cursor = conn.cursor()
        
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –í–µ—Ä—Å–∏—è: {version}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        """)
        tables = cursor.fetchall()
        
        print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:")
        for table in tables:
            print(f"   - {table[0]}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –∫–Ω–∏–≥ –≤ PostgreSQL...")
    
    # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if test_postgresql_connection():
        print("\n" + "="*50)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        if export_to_postgresql():
            print("\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –≠–∫—Å–ø–æ—Ä—Ç –≤ PostgreSQL –Ω–µ —É–¥–∞–ª—Å—è!")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL!")
